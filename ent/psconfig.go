// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mall/ent/psconfig"
	"mall/ent/psstrategy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PsConfig is the model entity for the PsConfig schema.
type PsConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 主键
	PsID int `json:"ps_id,omitempty"`
	// 场景
	PsScene string `json:"ps_scene,omitempty"`
	// 过滤策略
	PsFilter int `json:"ps_filter,omitempty"`
	// 消息策略
	PsMessage *int `json:"ps_message,omitempty"`
	// 时间策略
	PsEvent *int `json:"ps_event,omitempty"`
	// 特征策略
	PsFeature *int `json:"ps_feature,omitempty"`
	// 脚本
	PsStrategy *int `json:"ps_strategy,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID *int `json:"owner_id,omitempty"`
	// Managers holds the value of the "managers" field.
	Managers *string `json:"managers,omitempty"`
	// UpdateUser holds the value of the "update_user" field.
	UpdateUser *int `json:"update_user,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PsConfigQuery when eager-loading is set.
	Edges        PsConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PsConfigEdges holds the relations/edges for other nodes in the graph.
type PsConfigEdges struct {
	// 关联的策略脚本
	Strategy *PsStrategy `json:"strategy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategyOrErr returns the Strategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PsConfigEdges) StrategyOrErr() (*PsStrategy, error) {
	if e.Strategy != nil {
		return e.Strategy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: psstrategy.Label}
	}
	return nil, &NotLoadedError{edge: "strategy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PsConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case psconfig.FieldID, psconfig.FieldPsID, psconfig.FieldPsFilter, psconfig.FieldPsMessage, psconfig.FieldPsEvent, psconfig.FieldPsFeature, psconfig.FieldPsStrategy, psconfig.FieldOwnerID, psconfig.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case psconfig.FieldPsScene, psconfig.FieldManagers:
			values[i] = new(sql.NullString)
		case psconfig.FieldCreateTime, psconfig.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PsConfig fields.
func (pc *PsConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case psconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case psconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pc.CreateTime = value.Time
			}
		case psconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pc.UpdateTime = value.Time
			}
		case psconfig.FieldPsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ps_id", values[i])
			} else if value.Valid {
				pc.PsID = int(value.Int64)
			}
		case psconfig.FieldPsScene:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ps_scene", values[i])
			} else if value.Valid {
				pc.PsScene = value.String
			}
		case psconfig.FieldPsFilter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ps_filter", values[i])
			} else if value.Valid {
				pc.PsFilter = int(value.Int64)
			}
		case psconfig.FieldPsMessage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ps_message", values[i])
			} else if value.Valid {
				pc.PsMessage = new(int)
				*pc.PsMessage = int(value.Int64)
			}
		case psconfig.FieldPsEvent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ps_event", values[i])
			} else if value.Valid {
				pc.PsEvent = new(int)
				*pc.PsEvent = int(value.Int64)
			}
		case psconfig.FieldPsFeature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ps_feature", values[i])
			} else if value.Valid {
				pc.PsFeature = new(int)
				*pc.PsFeature = int(value.Int64)
			}
		case psconfig.FieldPsStrategy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ps_strategy", values[i])
			} else if value.Valid {
				pc.PsStrategy = new(int)
				*pc.PsStrategy = int(value.Int64)
			}
		case psconfig.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				pc.OwnerID = new(int)
				*pc.OwnerID = int(value.Int64)
			}
		case psconfig.FieldManagers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field managers", values[i])
			} else if value.Valid {
				pc.Managers = new(string)
				*pc.Managers = value.String
			}
		case psconfig.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				pc.UpdateUser = new(int)
				*pc.UpdateUser = int(value.Int64)
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PsConfig.
// This includes values selected through modifiers, order, etc.
func (pc *PsConfig) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryStrategy queries the "strategy" edge of the PsConfig entity.
func (pc *PsConfig) QueryStrategy() *PsStrategyQuery {
	return NewPsConfigClient(pc.config).QueryStrategy(pc)
}

// Update returns a builder for updating this PsConfig.
// Note that you need to call PsConfig.Unwrap() before calling this method if this PsConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PsConfig) Update() *PsConfigUpdateOne {
	return NewPsConfigClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PsConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PsConfig) Unwrap() *PsConfig {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PsConfig is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PsConfig) String() string {
	var builder strings.Builder
	builder.WriteString("PsConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ps_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.PsID))
	builder.WriteString(", ")
	builder.WriteString("ps_scene=")
	builder.WriteString(pc.PsScene)
	builder.WriteString(", ")
	builder.WriteString("ps_filter=")
	builder.WriteString(fmt.Sprintf("%v", pc.PsFilter))
	builder.WriteString(", ")
	if v := pc.PsMessage; v != nil {
		builder.WriteString("ps_message=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pc.PsEvent; v != nil {
		builder.WriteString("ps_event=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pc.PsFeature; v != nil {
		builder.WriteString("ps_feature=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pc.PsStrategy; v != nil {
		builder.WriteString("ps_strategy=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pc.OwnerID; v != nil {
		builder.WriteString("owner_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pc.Managers; v != nil {
		builder.WriteString("managers=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pc.UpdateUser; v != nil {
		builder.WriteString("update_user=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PsConfigs is a parsable slice of PsConfig.
type PsConfigs []*PsConfig
