// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mall/ent/predicate"
	"mall/ent/psstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PsStrategyUpdate is the builder for updating PsStrategy entities.
type PsStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *PsStrategyMutation
}

// Where appends a list predicates to the PsStrategyUpdate builder.
func (psu *PsStrategyUpdate) Where(ps ...predicate.PsStrategy) *PsStrategyUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUpdateTime sets the "update_time" field.
func (psu *PsStrategyUpdate) SetUpdateTime(t time.Time) *PsStrategyUpdate {
	psu.mutation.SetUpdateTime(t)
	return psu
}

// SetOwner sets the "owner" field.
func (psu *PsStrategyUpdate) SetOwner(i int) *PsStrategyUpdate {
	psu.mutation.ResetOwner()
	psu.mutation.SetOwner(i)
	return psu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (psu *PsStrategyUpdate) SetNillableOwner(i *int) *PsStrategyUpdate {
	if i != nil {
		psu.SetOwner(*i)
	}
	return psu
}

// AddOwner adds i to the "owner" field.
func (psu *PsStrategyUpdate) AddOwner(i int) *PsStrategyUpdate {
	psu.mutation.AddOwner(i)
	return psu
}

// SetScriptContent sets the "script_content" field.
func (psu *PsStrategyUpdate) SetScriptContent(s string) *PsStrategyUpdate {
	psu.mutation.SetScriptContent(s)
	return psu
}

// SetNillableScriptContent sets the "script_content" field if the given value is not nil.
func (psu *PsStrategyUpdate) SetNillableScriptContent(s *string) *PsStrategyUpdate {
	if s != nil {
		psu.SetScriptContent(*s)
	}
	return psu
}

// SetIsDelete sets the "is_delete" field.
func (psu *PsStrategyUpdate) SetIsDelete(i int) *PsStrategyUpdate {
	psu.mutation.ResetIsDelete()
	psu.mutation.SetIsDelete(i)
	return psu
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (psu *PsStrategyUpdate) SetNillableIsDelete(i *int) *PsStrategyUpdate {
	if i != nil {
		psu.SetIsDelete(*i)
	}
	return psu
}

// AddIsDelete adds i to the "is_delete" field.
func (psu *PsStrategyUpdate) AddIsDelete(i int) *PsStrategyUpdate {
	psu.mutation.AddIsDelete(i)
	return psu
}

// Mutation returns the PsStrategyMutation object of the builder.
func (psu *PsStrategyUpdate) Mutation() *PsStrategyMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PsStrategyUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PsStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PsStrategyUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PsStrategyUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PsStrategyUpdate) defaults() {
	if _, ok := psu.mutation.UpdateTime(); !ok {
		v := psstrategy.UpdateDefaultUpdateTime()
		psu.mutation.SetUpdateTime(v)
	}
}

func (psu *PsStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(psstrategy.Table, psstrategy.Columns, sqlgraph.NewFieldSpec(psstrategy.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdateTime(); ok {
		_spec.SetField(psstrategy.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := psu.mutation.Owner(); ok {
		_spec.SetField(psstrategy.FieldOwner, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedOwner(); ok {
		_spec.AddField(psstrategy.FieldOwner, field.TypeInt, value)
	}
	if value, ok := psu.mutation.ScriptContent(); ok {
		_spec.SetField(psstrategy.FieldScriptContent, field.TypeString, value)
	}
	if value, ok := psu.mutation.IsDelete(); ok {
		_spec.SetField(psstrategy.FieldIsDelete, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedIsDelete(); ok {
		_spec.AddField(psstrategy.FieldIsDelete, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PsStrategyUpdateOne is the builder for updating a single PsStrategy entity.
type PsStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PsStrategyMutation
}

// SetUpdateTime sets the "update_time" field.
func (psuo *PsStrategyUpdateOne) SetUpdateTime(t time.Time) *PsStrategyUpdateOne {
	psuo.mutation.SetUpdateTime(t)
	return psuo
}

// SetOwner sets the "owner" field.
func (psuo *PsStrategyUpdateOne) SetOwner(i int) *PsStrategyUpdateOne {
	psuo.mutation.ResetOwner()
	psuo.mutation.SetOwner(i)
	return psuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (psuo *PsStrategyUpdateOne) SetNillableOwner(i *int) *PsStrategyUpdateOne {
	if i != nil {
		psuo.SetOwner(*i)
	}
	return psuo
}

// AddOwner adds i to the "owner" field.
func (psuo *PsStrategyUpdateOne) AddOwner(i int) *PsStrategyUpdateOne {
	psuo.mutation.AddOwner(i)
	return psuo
}

// SetScriptContent sets the "script_content" field.
func (psuo *PsStrategyUpdateOne) SetScriptContent(s string) *PsStrategyUpdateOne {
	psuo.mutation.SetScriptContent(s)
	return psuo
}

// SetNillableScriptContent sets the "script_content" field if the given value is not nil.
func (psuo *PsStrategyUpdateOne) SetNillableScriptContent(s *string) *PsStrategyUpdateOne {
	if s != nil {
		psuo.SetScriptContent(*s)
	}
	return psuo
}

// SetIsDelete sets the "is_delete" field.
func (psuo *PsStrategyUpdateOne) SetIsDelete(i int) *PsStrategyUpdateOne {
	psuo.mutation.ResetIsDelete()
	psuo.mutation.SetIsDelete(i)
	return psuo
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (psuo *PsStrategyUpdateOne) SetNillableIsDelete(i *int) *PsStrategyUpdateOne {
	if i != nil {
		psuo.SetIsDelete(*i)
	}
	return psuo
}

// AddIsDelete adds i to the "is_delete" field.
func (psuo *PsStrategyUpdateOne) AddIsDelete(i int) *PsStrategyUpdateOne {
	psuo.mutation.AddIsDelete(i)
	return psuo
}

// Mutation returns the PsStrategyMutation object of the builder.
func (psuo *PsStrategyUpdateOne) Mutation() *PsStrategyMutation {
	return psuo.mutation
}

// Where appends a list predicates to the PsStrategyUpdate builder.
func (psuo *PsStrategyUpdateOne) Where(ps ...predicate.PsStrategy) *PsStrategyUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PsStrategyUpdateOne) Select(field string, fields ...string) *PsStrategyUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PsStrategy entity.
func (psuo *PsStrategyUpdateOne) Save(ctx context.Context) (*PsStrategy, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PsStrategyUpdateOne) SaveX(ctx context.Context) *PsStrategy {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PsStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PsStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PsStrategyUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdateTime(); !ok {
		v := psstrategy.UpdateDefaultUpdateTime()
		psuo.mutation.SetUpdateTime(v)
	}
}

func (psuo *PsStrategyUpdateOne) sqlSave(ctx context.Context) (_node *PsStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(psstrategy.Table, psstrategy.Columns, sqlgraph.NewFieldSpec(psstrategy.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PsStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, psstrategy.FieldID)
		for _, f := range fields {
			if !psstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != psstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdateTime(); ok {
		_spec.SetField(psstrategy.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.Owner(); ok {
		_spec.SetField(psstrategy.FieldOwner, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedOwner(); ok {
		_spec.AddField(psstrategy.FieldOwner, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.ScriptContent(); ok {
		_spec.SetField(psstrategy.FieldScriptContent, field.TypeString, value)
	}
	if value, ok := psuo.mutation.IsDelete(); ok {
		_spec.SetField(psstrategy.FieldIsDelete, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedIsDelete(); ok {
		_spec.AddField(psstrategy.FieldIsDelete, field.TypeInt, value)
	}
	_node = &PsStrategy{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
